@start = translation-unit;

translation-unit = script-declaration external-declaration*;
script-declaration = 'script'! String ';'!;

external-declaration = function-definition | declaration ';'!;

function-definition = declaration-specifier* declarator declaration* compound-statement;

pointer = '*'! pointer?;

/* *** Expressions *** */

constant-expression = conditional-expression;

conditional-expression = logical-or-expression | ternar-expression;
ternar-expression = logical-or-expression '?'! expression ':'! conditional-expression;

logical-or-expression = logical-and-expression ('||'! logical-and-expression)*;
logical-and-expression = inclusive-or-expression ('&&'! inclusive-or-expression)*;
inclusive-or-expression = exclusive-or-expression ('|'! exclusive-or-expression)*;
exclusive-or-expression = and-expression ('^'! and-expression)*;
and-expression = equality-expression ('&'! equality-expression)*;

equality-expression = relational-expression ((('=' | '!') '=') relational-expression)*;
relational-expression = shift-expression ((('<' | '>') '='?) shift-expression)*;
shift-expression = additive-expression (('<<' | '>>') additive-expression)*;
additive-expression = multiplicative-expression (('+' | '-') multiplicative-expression)*;
multiplicative-expression = cast-expression (('*' | '/' | '%') cast-expression)*;

cast-expression = unary-expression | type-cast;
type-cast = '('! type-name ')'! cast-expression;

unary-expression = postfix-expression
                     | (unary-increment | unary-decrement) unary-expression
                     | unary-operator cast-expression
										 | sizeof-expression;

sizeof-expression = 'sizeof'! (unary-expression | type-name);

postfix-expression = primary-expression (array-access-expr
																						 | assign-access-expr
																						 | prop-access-expr
																						 | struct-access-expr
																						 | unary-increment
																						 | unary-decrement)*;

array-access-expr = '['! expression ']'!;
assign-access-expr = '('! assignment-expression* ')'!;
prop-access-expr = '.'! Identifier;
struct-access-expr = '-'! '>'! Identifier;


primary-expression = Identifier
                       | constant
                       | String
                       | '('! expression ')'!;

constant = integer-constant
             | character-constant
             | floating-constant
             | enumeration-constant;

integer-constant = Int;
character-constant = String;
floating-constant = Float;
enumeration-constant = Identifier;

expression = assignment-expression (','! assignment-expression)*;

assignment-expression = conditional-expression | unary-expression assignment-operator assignment-expression;

assignment-operator = ('*' | '/' | '%' | '+' | '-' | '<<' | '>>' | '&' | '^' | '|') '=';

unary-operator = '&' | '*' | '+' | '-' | '~' | '!';

/* *** Typedef *** */

typedef-name = Identifier;

declaration-specifier = storage-class-specifier | type-specifier;

storage-class-specifier = storage-class-typedef;
storage-class-typedef = 'typedef'!;

built-in-type = 'void' | 'bool' | 'int' | 'float';

type-specifier = built-in-type | struct-specifier | enum-specifier | typedef-name;

type-name = specifier-qualifier+ abstract-declarator?;

parameter-type-list = parameter-list parameter-type-opened?;
parameter-type-opened = ','! '...'!;

parameter-list = parameter-declaration (','! parameter-declaration)*;

parameter-declaration = declaration-specifier+ declarator | declaration-specifier+ abstract-declarator | declaration-specifier+;

abstract-declarator = pointer | pointer direct-abstract-declarator | direct-abstract-declarator;

direct-abstract-declarator =  '('! abstract-declarator ')'! (direct-abstract-array-declarator | direct-abstract-method-declarator)*;
direct-abstract-array-declarator = '['! constant-expression? ']'!;
direct-abstract-method-declarator = '('! parameter-type-list? ')'!;

/* *** Structs *** */

struct-specifier = struct ( Identifier? '{'! struct-declaration+ '}'! | Identifier ('{'! struct-declaration+ '}'!)? );

struct = 'struct'!;
struct-declaration = specifier-qualifier* struct-declarator-list;

specifier-qualifier = type-specifier;

struct-declarator-list = struct-declarator (','! struct-declarator)*;
struct-declarator = declarator | (declarator ':' constant-expression) | (':' constant-expression);

/* *** Enums *** */

enum-specifier = 'enum'! (Identifier '{'! enumerator-list '}'! | '{' enumerator-list '}' | Identifier);

enumerator-list = enumerator (','! enumerator)*;

enumerator = Identifier | Identifier '='! constant-expression;

/* *** Declarations *** */

declaration = declaration-specifier+ init-declarator*;
// typedef int *myType -> declaration
// typedef int -> declaration-specifier
// int -> type-specifier (built-in-type)
// *myType -> init-declarator (declarator)
// * -> pointer
// myType -> direct-declarator(identifier)

init-declarator = declarator ('='! initializer)?;

declarator = pointer? direct-declarator;
direct-declarator = Identifier specific-declarator*;

specific-declarator = array-declarator | method-declarator | ident-declarator;
array-declarator = '['! constant-expression? ']'!;
method-declarator = '('! parameter-type-list ')'!;
ident-declarator = '('! Identifier* ')'!;



initializer = assignment-expression | '{'! initializer-list '}'! | '{'! initializer-list ','! '}'!;

initializer-list = initializer (','! initializer);

/* *** Statements *** */

compound-statement = '{'! (declaration ';'!)* statement* '}'!;

statement = labeled-statement
              | expression-statement
              | compound-statement
              | selection-statement
              | iteration-statement
              | jump-statement;

labeled-statement = straight-labeled-statement | case-statement | switch-default-statement;
straight-labeled-statement = Identifier ':'! statement;
case-statement = 'case'! constant-expression ':'! statement;
switch-default-statement = 'default'! ':'! statement;

expression-statement = expression? ';'!;

selection-statement = selection-if | selection-switch;
selection-if = 'if'! '('! expression ')'! statement selection-else?;
selection-else = 'else'! statement;
selection-switch = 'switch'! '('! expression ')'! statement;

iteration-statement = straight-while | straight-do | straight-for;
straight-while = 'while'! '('! expression ')'! statement;
straight-do = 'do'! statement 'while'! '('! expression ')'! ';'!;
straight-for = 'for'! '('! expression? ';' expression? ';' expression? ')'! statement;

jump-statement = (jump-goto | jump-return | continue | break) ';'!;
jump-goto = 'goto'! Identifier;
jump-return = 'return'! expression?;
continue = 'continue'!;
break = 'break'!;

unary-increment = '+' '+';
unary-decrement = '-' '-';


grammar-comment = 'This grammar was adapted from Section A13 of The C programming language, 2nd edition, by Brian W. Kernighan and Dennis M. Ritchie,Prentice Hall, 1988.';