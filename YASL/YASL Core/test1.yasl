script test;
native void log(char *format,...);

int main (int arg) {
	int result = 0;
	int a[10];
	for (int i = 0; i < 10; i++){
		a[9 - i] = i;
	};
	for (int i = 0; i < 10; i++){
		int r = a[i] * ((i % 2) ? 1 : -1);
		result += r;
	}

	return result;
}

/*
script test;
uses game;

void triggerFire(GameTrigger *trigger) {
	log("Fired trigger %s", trigger.specifier);
	switch (trigger.type) {
		case GameTriggerTypeSpawn: {
//			spawn *spawn = spawnEntity("object");
//			float spawnX = 10.0, spawnY = 12.0;
//			entityMove(spawn, spawnX, spawnY);
			break;
		}

		case GameTriggerTypeScript:
			break;

		default:
			log("Unknown game trigger type %i", trigger.type);
	}
}

int processTriggers(GameTriggers *triggers) {
	int launchedFor = launchTime();
	int nearestTrigger = MAX_INT;
	for (int i = 0; i < triggers.count; i++) {
		GameTrigger *trigger = &triggers.trigger[i];
		int next = trigger.nextLaunch;
		if (next == STATE_FAIL)
			continue;

		if (next <= launchedFor) {
			trigger.prevLaunch = launchedFor;
			triggerFire(trigger);
		}

		if ((trigger.frequency == GameTriggerTypeOnce) && (bool)next)
			trigger.nextLaunch = STATE_FAIL;
		else {
			trigger.nextLaunch = trigger.prevLaunch + trigger.freq;
			nearestTrigger = min(nearestTrigger, trigger.nextLaunch);
		}
	}

	return nearestTrigger;
}

bool paused;
int triggerWorker(int *params) {
	handle breakEvent = params[0];
	GameTriggers *triggers = params[1];

	for (int i = 0; i < triggers.count; i++)
		triggers.trigger[i].nextLaunch = MAX_INT;

	int nextTrigger = 0;
	int launchedFor = launchTime();
	while (waitFor(breakEvent, launchedFor - nextTrigger, EventStateSet) == EventStateTimeout) {
		nextTrigger = processTriggers(triggers);
		if (nextTrigger == MAX_INT)
			break;
	}
}

void loadTriggers(handle finisherEvent) {
	GameTriggers *triggers = gameLoadMapTriggers();
	if (triggers) {
		int params[] = {finisherEvent, triggers};
		closeEvent(threadStart(&triggerWorker, ThreadStateRunning, &params));
	}
}

bool processEvent(int eventID) {
	switch (eventID) {
		case GameEventPause: {
			paused = true;
			log("should pause");
			break;
		}
		case GameEventResume: {
			paused = false;
			log("should resume");
			break;
		}
		case GameEventEnd: {
			log("should end");
			return false;
		}
		default: {
			log("Unknown game event ID %i", eventID);
			return true;
		}
	}
	log("Processed event %i", eventID);
	return true;
}

int main(int arg) {
	char *GAME_EVENT = "__event_game_event";
	
	handle event = createEvent(GAME_EVENT, EventStateClear, true);
	handle finisher = createEvent(nil, EventStateClear, true);
	handle listener = gameRegisterEventListener();
	loadTriggers(finisher);
	while (true) {
		switch (waitFor(event, 1000, EventStateSet)) {
			case EventStateFailed: {
				log("Failed game event wait in script thread %i", currentThread());
				break;
			}
			case EventStateSet: {
				if (!processEvent(gameEventPop(listener)))
					break;

				continue;
			}
			case EventStateTimeout:
			default:
				continue;
		}
		break;
	}

	closeEvent(finisher);
	return 0;
}