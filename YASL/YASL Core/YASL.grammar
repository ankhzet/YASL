@start = translation-unit;

translation-unit = script-declaration external-declarations;
script-declaration = 'script'! Identifier ';'!;

external-declarations = external-declaration*;
external-declaration = declaration ';'! | function-definition;

/* ***** Declarations ***** */

/* Struct-type: declares structure.

 */
struct-type = struct '{'! struct-members-list '}'!;
struct = 'struct'!;
struct-members-list = struct-member (','! struct-member)* ','?;
struct-member = type-specifier declarator-list;
declarator-list = declarator (','! declarator)*;

/* Enum-type: declares enums.

 */
enum-type = enum '{'! enum-members-list '}'!;
enum = 'enum'!;
enum-members-list = enum-member (','! enum-member)* ','!?;
enum-member = Identifier ('='! Int)?;

/* Declarator: declares variable/parameter
 
 int *myInt = 10;
 int myInt;
 int myint[];
 void myFunc(int param1, param2; void *param3) {}

 int <declarator> = 10;
 int <declarator>;
 int <declarator>;

 void myFunc(int <declarator>, <declarator>; void <declarator>) {}
 void <declarator> {}

 */

declarator = pointer? direct-declarator;
direct-declarator = Identifier specific-declarator*;
pointer = '*'! pointer?;

specific-declarator = array-declarator | method-param-list-specifier;
array-declarator = '['! constant-expression? ']'!;

/* Declaration: declaration of variable, type.
 int myVar;
 typedef int myType;
 */

declaration = type-declaration | var-declaration;

/* Type-specifier: specifies type of parameter, variable, typedef-d type.
 int myVar;
 typedef int[] myType;
 void myFunc(int param1; int * param2) {}

 <type-specifier> myVar;
 typedef <type-specifier> myType;
 <type-specifier myFunc(<type-specifier> param1; <type-specifier> *param2) {}

 */
type-specifier = built-in-type | struct-type | enum-type | typedef-type;
built-in-type = 'void' | 'int' | 'bool' | 'float' | 'char';

type-declaration = typedef type-specifier declarator;
typedef = 'typedef'!;
typedef-type = Identifier;

/* ***** Function definition ***** */

method-param-list-specifier = '('! method-param-list* ')'!;
method-param-list = method-param-group (';'! method-param-group)*;
method-param-group = type-specifier declarator-list;

/* ***** Var declaration ***** */

var-declaration = type-specifier init-declarator-list;
init-declarator-list = init-declarator (','! init-declarator)*;

/* init-declarator: part of the statement, that initializes variables.
 int myInt = myInt2 = a * b;

 int myInt <initializer>
 */

init-declarator = declarator ('='! initializer)?;

initializer = assignment-initializer | initializer-list;

initializer-list = '{'! initializer (','! initializer)* ','? '}'!;

assignment-initializer = assignment-expression;

/* ***** Statements ***** */

statement = compound-statement | jump-statement | selection-statement | iteration-statement | expression-statement;

expression-statement = expression? ';'!;
compound-statement = '{'! (statement | declaration ';'!)* '}'!;

proubably-empty-statement = statement | ';'!;
selection-statement = selection-if | selection-switch;
selection-if = 'if'! '('! expression ')'! statement selection-else?;
selection-else = 'else'! statement;

selection-switch = 'switch'! '('! expression ')'! '{'! switch-statements '}'!;
switch-statements = (switch-statement | default-switch-statement)+;
switch-statement = 'case'! constant-expression ':'! statement?;
default-switch-statement = 'default'! ':'! statement?;

jump-statement = (jump-goto | jump-return | continue | break) ';'!;
jump-goto = 'goto'! Identifier;
jump-return = 'return'! expression?;
continue = 'continue'!;
break = 'break'!;

iteration-statement = straight-while | straight-do | straight-for;
straight-while = 'while'! '('! expression ')'! proubably-empty-statement;
straight-do = 'do'! statement? 'while'! '('! expression ')'! ';'!;
straight-for = 'for'! '('! for-initializer ';'! for-condition ';'! for-iterator ')'! for-statements;

for-statements = proubably-empty-statement;
for-initializer = declaration?;
for-condition = expression?;
for-iterator = expression?;

/* ***** Expressions ***** */

constant-expression = conditional-expression;

conditional-expression = ternar-expression;
ternar-expression = logical-or-expression ('?'! conditional-expression ':'! conditional-expression)?;

logical-or-expression = logical-and-expression ('||' logical-and-expression)*;
logical-and-expression = inclusive-or-expression ('&&' inclusive-or-expression)*;
inclusive-or-expression = exclusive-or-expression ('|' exclusive-or-expression)*;
exclusive-or-expression = and-expression ('^' and-expression)*;
and-expression = equality-expression ('&' equality-expression)*;

equality-expression = relational-expression (('==' | '!=') relational-expression)*;
relational-expression = shift-expression (('<' | '<=' | '>' | '>=') shift-expression)*;
shift-expression = additive-expression (('<<' | '>>') additive-expression)*;
additive-expression = multiplicative-expression (('+' | '-') multiplicative-expression)*;
multiplicative-expression = cast-expression (('*' | '/' | '%') cast-expression)*;

cast-expression = unary-expression | type-cast;
type-cast = '('! typedef-type ')'! cast-expression;

unary-expression = postfix-expression
| increment-decrement-expression
| unary-operator-expression
| sizeof-expression;

unary-operator-expression = unary-operator cast-expression;
increment-decrement-expression = (unary-increment | unary-decrement) unary-expression;

sizeof-expression = 'sizeof'! (unary-expression | typedef-type);

postfix-expression = postfix-increment-decrement | postfix-method-call | postfix-array-access | (primary-expression (prop-access-expr
																				 | struct-access-expr)*);

postfix-increment-decrement = primary-expression (unary-increment | unary-decrement);
postfix-method-call = primary-expression method-call-expr;
postfix-array-access = primary-expression array-access-expr;

array-access-expr = '['! expression ']'!;
method-call-expr = '('! expression? ')'!;
prop-access-expr = '.'! Identifier;
struct-access-expr = '->'! Identifier;


primary-expression = constant
| variable
| String
| '('! expression ')'!;

constant = integer-constant
| character-constant
| floating-constant
| boolean-constant
| enumeration-constant;

integer-constant = Int;
character-constant = String;
floating-constant = Float;
boolean-constant = Bool;
enumeration-constant = Identifier;

variable = Identifier;

expression = assignment-expression (','! expression)*;

assignment-expression = unary-expression assignment-operator assignment-expression | conditional-expression;

assignment-operator = ('*' | '/' | '%' | '+' | '-' | '<<' | '>>' | '&' | '^' | '|')? '='!;

unary-operator = '&' | '*' | '+' | '-' | '~' | '!';
unary-increment = '++'!;
unary-decrement = '--'!;


/* ***** Function definition ***** */

function-definition = function-forward-declaration | function-declaration;
function-forward-declaration = function-signature ';'!;
function-declaration = function-signature function-body?;
function-signature = function-specifier type-specifier declarator;
function-specifier = (native | extern)*;
native = 'native'!;
extern = 'extern'!;
function-body = compound-statement;
