@start = translation-unit;

translation-unit = script-declaration external-declaration*;
script-declaration = 'script'! Identifier ';'!;

external-declaration = function-definition | declaration ';'!;

/* ***** Declarations ***** */

/* Struct-type: declares structure.
 
 */
struct-type = struct '{'! struct-members-list '}'!;
struct = 'struct'!;
struct-members-list = struct-member (','! struct-member)* ','?;
struct-member = type-specifier declarator-list;
declarator-list = declarator (','! declarator)*;

/* Declarator: declares variable/parameter
 
 int *myInt = 10;
 int myInt;
 int myint[];
 void myFunc(int param1, param2; void *param3) {}

 int <declarator> = 10;
 int <declarator>;
 int <declarator>;

 void myFunc(int <declarator>, <declarator>; void <declarator>) {}
 void <declarator> {}

 */

declarator = pointer? direct-declarator;
direct-declarator = Identifier specific-declarator*;
pointer = '*'! pointer?;

specific-declarator = array-declarator | method-param-list-specifier;
array-declarator = '['! constant-expression? ']'!;

/* init-declarator: part of the statement, that initializes variables.
 int myInt = myInt2 = a * b;

 int myInt <initializer>
 */

init-declarator = declarator ('='! initializer)?;

init-declarator-list = init-declarator (','! init-declarator)*;

initializer = assignment-expression | initializer-list;

initializer-list = '{'! initializer (','! initializer)* ','? '}'!;

/* Declaration: declaration of variable, type.
 int myVar;
 typedef int myType;
 */

declaration = type-declaration | var-declaration;

/* Type-specifier: specifies type of parameter, variable, typedef-d type.
 int myVar;
 typedef int[] myType;
 void myFunc(int param1; int * param2) {}

 <type-specifier> myVar;
 typedef <type-specifier> myType;
 <type-specifier myFunc(<type-specifier> param1; <type-specifier> *param2) {}

 */
type-specifier = built-in-type | struct-type | typedef-type;
built-in-type = void-type | int-type | bool-type | float-type | char-type;
void-type = 'void'!;
int-type = 'int'!;
bool-type = 'bool'!;
float-type = 'float'!;
char-type = 'char'!;

type-declaration = typedef type-specifier typedef-type;
typedef = 'typedef'!;
typedef-type = Identifier;

var-declaration = type-specifier init-declarator-list+;

/* ***** Function definition ***** */
function-definition = type-specifier declarator compound-statement;

method-param-list-specifier = '('! method-param-list* ')'!;
method-param-list = method-param-group (';'! method-param-group)*;
method-param-group = type-specifier declarator-list;

/* Statement: declares statements.
 */

cast-expression = unary-expression | type-cast;
type-cast = '('! typedef-type ')'! cast-expression;

unary-expression = postfix-expression
| (unary-increment | unary-decrement) unary-expression
| unary-operator cast-expression
| sizeof-expression;

sizeof-expression = 'sizeof'! (unary-expression | typedef-type);

postfix-expression = primary-expression (array-access-expr
																				 | assign-access-expr
																				 | prop-access-expr
																				 | struct-access-expr
																				 | unary-increment
																				 | unary-decrement)*;

array-access-expr = '['! expression ']'!;
assign-access-expr = '('! assignment-expression* ')'!;
prop-access-expr = '.'! Identifier;
struct-access-expr = '-'! '>'! Identifier;


primary-expression = variable | constant | '('! expression ')'!;

constant = integer-constant | character-constant | floating-constant | boolean-constant;
integer-constant = Int;
character-constant = String;
floating-constant = Float;
boolean-constant = Bool;
//enumeration-constant = Identifier;

variable = Identifier;

constant-expression = conditional-expression;

expression = assignment-expression (','! assignment-expression)*;

assignment-expression = conditional-expression | unary-expression assignment-operator assignment-expression;

conditional-expression = bool-true | bool-false;

assignment-operator = ('*' | '/' | '%' | '+' | '-' | '<<' | '>>' | '&' | '^' | '|') '=';

unary-operator = '&' | '*' | '+' | '-' | '~' | '!';

unary-increment = '+' '+';
unary-decrement = '-' '-';

bool-true = 'true'!;
bool-false = 'false'!;

/* ***** Statements ***** */

compound-statement = '{'! ((declaration ';'!) | statement)* '}'!;
statement = 'statement' ';'!;


/*

 typedef int myint;

 int myint;
 int myint = 10;

 int *myint;

 int *myint(int var1, var2; int var3) {

 }